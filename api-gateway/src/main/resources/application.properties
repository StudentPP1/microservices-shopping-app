spring.application.name=api-gateway
server.port=9000

# get issuer-uri from keycloak: Realm Settings => Endpoints
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/spring-microservices-security-realm

springdoc.swagger-ui.path=/swagger-ui.html
# aggregate all services urls
springdoc.swagger-ui.urls[0].name=Product Service
springdoc.swagger-ui.urls[0].url=/aggregate/product-service/v3/api-docs
springdoc.swagger-ui.urls[1].name=Order Service
springdoc.swagger-ui.urls[1].url=/aggregate/order-service/v3/api-docs
springdoc.swagger-ui.urls[2].name=Inventory Service
springdoc.swagger-ui.urls[2].url=/aggregate/inventory-service/v3/api-docs

# ! actuator endpoints
# enable circuit breaker
management.health.circuitbreakers.enabled=true
# asking actuator enable all endpoints it provides
management.endpoints.web.exposure.include=*
# all details are displayed
management.endpoint.health.show-details=always
# send all http metrics in type of histogram
management.metrics.distribution.percentiles-histogram.http.server.requests=true
# all logs and metrics will be with key
management.observations.key-values.application=api-gateway
# generate tracing for 100 % requests
management.tracing.sampling.probability=1.0

# ! Resilience4j properties
# make sure that info from actuator & resilience4j is synchronized
resilience4j.circuitbreaker.configs.default.register-health-indicator=true
# use criteria: number of requests
# count number of requests coming to API Gateway and use them for statistic
resilience4j.circuitbreaker.configs.default.sliding-window-type=count_based
# use 10 requests in statics to choose enable circuit breaker or not (don't guarantee that will do 10)
resilience4j.circuitbreaker.configs.default.sliding-window-size=10
# circuit breaker is enabled if in these requests 50% are failed (1-10)
# but if we have minimum-number-of-calls => if 50% of them are failed => open state (3-5)
resilience4j.circuitbreaker.configs.default.failure-rate-threshold=50
# after 5 second circuit breaker is open => start check requests if they health (half-open state)
resilience4j.circuitbreaker.configs.default.wait-duration-in-open-state=5s
# in half-open if all 3 same requests are fail => open state, if any of them success => close
resilience4j.circuitbreaker.configs.default.permitted-number-of-calls-in-half-open-state=3
# automatic switch from open to half-open state after 5s
resilience4j.circuitbreaker.configs.default.automatic-transition-from-open-to-half-open-enabled=true
# it will start to consider failure request after 5 calls
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=5

# if we don't get response from request during 3s => request failed, counter for breaker increment
resilience4j.timelimiter.configs.default.timeout-duration=3s

# retry properties (retry max 3 times and then wait response from each 2s)
resilience4j.retry.configs.default.max-attempts=3
resilience4j.retry.configs.default.wait-duration=2s