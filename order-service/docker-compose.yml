version: "4"
services:
  zookeeper: # оркестрирование разных кластеров кафки
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1 # айдишник брокера
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181' # подключение к zookeeper
      # протокол безопасности (шифрование)
      # в нашем случае просто текст
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # слушатели подключений к кафке
      # для других контейнеров с порта 29092, для локальной машины - 9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      # создаст 1 брокер для копирования информации об
      # прочитанных данных (consumer group)
      # до какого места дочитали в топиках (offset) и тд
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry: # allow not duplicate message class type in two services
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092' # соединение с брокером
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081 # expose listen port

  kafka-ui: # юзер интерфейс для просмотра информации внутри брокера
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080" # в докер-контейнере будет 8080
    depends_on:
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTERS_NAME: local # используем локальный кластер
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092 # подключаемся к брокеру через контейнер
      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true' # зависит от образа юзер интерфейса

  postgres:
    image: postgres:latest
    container_name: order-service-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: order_service
    ports:
      - "5432:5432"
    volumes:
      - ./postgres:/var/lib/postgres
      # ! ./postgres => створиться папка на локалій машині, там де заходиться docker-compose
      # ! /var/lib/postgres => папка всередині контейнера
      # ! Щоб усі дані бази зберігалися на хості, навіть якщо контейнер буде видалено або перезапущено.
      # ./docker/mysql/init.sql => файл на локалій машині
      # /docker-entrypoint-initdb.d => копіюємо в папку, яку контейнер перевіряє при запуску і запускає звідси файли
      # - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql